AWSTemplateFormatVersion: '2010-09-09'
Resources:
  NoteDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: CreatedAt
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: CreatedAt
          KeyType: HASH
        - AttributeName: Name
          KeyType: RANGE

  NoteS3Bucket:
    Type: 'AWS::S3::Bucket'
  

  CULambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Handler: Create-Update.lambda_handler 
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref NoteDynamoDBTable
          S3_BUCKET_NAME: !Ref NoteS3Bucket
      Code:
        S3Bucket: code-for-note-functions-86
        S3Key: Create-Update.zip
      Timeout: 30

  READLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Handler: Read.lambda_handler 
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref NoteDynamoDBTable
          S3_BUCKET_NAME: !Ref NoteS3Bucket
      Code:
        S3Bucket: code-for-note-functions-86
        S3Key: Read.zip
      Timeout: 30

  DELETELambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Handler: Delete.lambda_handler 
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref NoteDynamoDBTable
          S3_BUCKET_NAME: !Ref NoteS3Bucket
      Code:
        S3Bucket: code-for-note-functions-86
        S3Key: Delete.zip
      Timeout: 30

  S3BucketDeleteFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Handler: s3-del-obj.lambda_handler 
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref NoteS3Bucket
      Code:
        S3Bucket: code-for-note-functions-86
        S3Key: s3-del-obj.zip
      Timeout: 30

  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'

  MyCRUDRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    DependsOn: [CULambdaFunction, READLambdaFunction, DELETELambdaFunction]
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - 'REGIONAL'
      Description: APIs for CRUD Lambda Functions
      Name: CRUD-REST-API

  MyCRUDAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyCRUDRestApi
      ParentId: !GetAtt [MyCRUDRestApi, RootResourceId]
      PathPart: 'notes'

  CULambdaFunctionMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref MyCRUDAPIResource
      RestApiId: !Ref MyCRUDRestApi
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt CULambdaFunction.Arn

  READLambdaFunctionMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref MyCRUDAPIResource
      RestApiId: !Ref MyCRUDRestApi
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt READLambdaFunction.Arn

  DELETELambdaFunctionMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      ResourceId: !Ref MyCRUDAPIResource
      RestApiId: !Ref MyCRUDRestApi
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt DELETELambdaFunction.Arn

  MyCRUDApiGatewayOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref MyCRUDAPIResource
      RestApiId: !Ref MyCRUDRestApi
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          integration.request.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,DELETE'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      HttpMethod: OPTIONS
      AuthorizationType: NONE

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref MyCRUDRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [CULambdaFunctionMethod, READLambdaFunctionMethod, DELETELambdaFunctionMethod]
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref MyCRUDRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                  - !GetAtt CULambdaFunction.Arn
                  - !GetAtt READLambdaFunction.Arn
                  - !GetAtt DELETELambdaFunction.Arn

    




  